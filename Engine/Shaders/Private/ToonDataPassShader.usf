#include "Common.ush"
#include "MobileBasePassCommon.ush"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"

struct FVelocityInterpsVSToPS
{
	half3 Normal : NORMAL;
	FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
};
struct FToonOutlinePassVSToPS
{
	float4 Position : SV_POSITION;
	FVelocityInterpsVSToPS Interps;
};

#define FVertexOutput FToonOutlinePassVSToPS
#define VertexFactoryGetInterpolants VertexFactoryGetInterpolantsVSToPS
/*=============================================================================
 * Vertex Shader
 *============================================================================*/
#if VERTEXSHADER
void MainVertexShader(
	FVertexFactoryInput Input,
	out FVertexOutput Output
)
{
	ResolvedView = ResolveView();
	float4 ClipSpacePosition;
	
	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPositionExcludingWPO = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPosition = WorldPositionExcludingWPO;
	half3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);	
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPosition.xyz, TangentToLocal);
	WorldPosition.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPosition);
	ClipSpacePosition = INVARIANT(mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));
	Output.Position = INVARIANT(ClipSpacePosition);
	Output.Interps.Normal = VertexFactoryGetWorldNormal(Input, VFIntermediates);
	Output.Interps.FactoryInterpolants = VertexFactoryGetInterpolants(Input, VFIntermediates, VertexParameters);
}

#endif // VERTEXSHADER

/*============================================================================= 
 * Pixel Shader
 *============================================================================*/

//#if PIXELSHADER
void MainPixelShader(
	in INPUT_POSITION_QUALIFIERS float4 SvPosition : SV_Position,
	FVelocityInterpsVSToPS Input
	OPTIONAL_IsFrontFace
	OPTIONAL_OutDepthConservative
	, out float4 ToonDataA : SV_Target0
#if MATERIALBLENDING_MASKED_USING_COVERAGE
, out uint OutCoverage : SV_Coverage
#endif
)
{
	
	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Input.FactoryInterpolants, SvPosition);
	float3 OutlineColor = GetMaterialShadowcolor(MaterialParameters);
	ToonDataA = half4(OutlineColor, 1.0);
}
//#endif // PIXELSHADER